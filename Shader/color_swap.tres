[gd_resource type="Shader" format=3 uid="uid://jsxn8nkwn146"]

[resource]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 color ;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// All components are in the range [0â€¦1], including hue.
vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

// ===== end

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	vec3 hsv_tex = rgb2hsv(tex.rgb);
	vec3 hsv_color = rgb2hsv(color.rgb);
	if ( hsv_tex.x >= 119.0/360.0 && hsv_tex.x <= 121.0/360.0)
		COLOR = vec4(hsv2rgb(vec3(hsv_color.x,hsv_color.y,hsv_tex.z)),tex.a);
	else
		COLOR = tex;
}
"
